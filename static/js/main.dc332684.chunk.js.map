{"version":3,"sources":["App/Teleprompter/TeleprompterText/TextScroller.module.css","App/Teleprompter/App.module.css","App/Teleprompter/TeleprompterText/index.tsx","App/Teleprompter/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","text","fontSize","flipX","width","height","onNumVisibleLinesChange","displayTextRef","useRef","useLayoutEffect","numLines","Array","from","current","getClientRects","filter","r","y","length","className","classNames","styles","displayTextContainer","style","displayText","ref","useState","setText","setFontSize","scrollSpeed","setScrollSpeed","setFlipX","numVisibleLines","setNumVisibleLines","theme","useTheme","scrollPosition","useWindowScrollPosition","onFullScreenButtonClick","a","screenfull","isEnabled","request","app","AppBar","position","background","palette","default","Grid","container","spacing","justify","alignItems","item","FormControlLabel","control","TextField","placeholder","value","onChange","event","currentTarget","label","Description","sliderControl","Slider","min","max","step","isArray","FastForward","TextFields","transform","Switch","checked","SwapHoriz","Button","onClick","lineScrollDurationMs","Scroll","animateScroll","scrollToBottom","duration","isDynamic","offset","smooth","variant","Fullscreen","TeleprompterText","createMuiTheme","type","ThemeProvider","CssBaseline","Teleprompter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dc332684.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayText\":\"TextScroller_displayText__1eQ17\",\"displayTextContainer\":\"TextScroller_displayTextContainer__2_vYQ\",\"flipX\":\"TextScroller_flipX__3Qb7g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__26_DA\",\"controls\":\"App_controls__3Zb_5\",\"githubLink\":\"App_githubLink__TDdNs\"};","import classNames from 'classnames'\nimport React, {RefObject, useLayoutEffect, useRef} from 'react'\nimport styles from './TextScroller.module.css'\n\ninterface TeleprompterTextProps {\n  readonly text?: string\n  readonly fontSize?: string\n  readonly flipX?: boolean\n  readonly width?: string\n  readonly height?: string\n  readonly onNumVisibleLinesChange?: {(numLines: number): void}\n}\n\nexport default function({text = '', fontSize = 'xx-large', flipX = false, width = 'auto', height = 'auto', onNumVisibleLinesChange}: TeleprompterTextProps) {\n  const displayTextRef: RefObject<HTMLParagraphElement> = useRef(null)\n\n  useLayoutEffect(() => {\n    const numLines: number = Array.from(displayTextRef?.current?.getClientRects()!)\n      .filter(r => r.y >= 0)\n      .length\n    onNumVisibleLinesChange?.(numLines)\n  })\n\n  return <div className={classNames(styles.displayTextContainer, {[styles.flipX]: flipX})}\n              style={{width: width, height: height}}>\n    <p className={styles.displayText}\n       style={{fontSize: fontSize}}\n       ref={displayTextRef}>\n      {text}\n    </p>\n  </div>\n}\n","import React, {ChangeEvent, useState} from 'react'\n\nimport {AppBar, Button, FormControlLabel, Grid, Slider, Switch, TextField, useTheme} from '@material-ui/core'\nimport {Description, FastForward, Fullscreen,  SwapHoriz, TextFields} from '@material-ui/icons'\nimport useWindowScrollPosition from '@rehooks/window-scroll-position'\nimport Scroll from 'react-scroll'\nimport screenfull from 'screenfull'\n\nimport styles from './App.module.css'\nimport TeleprompterText from './TeleprompterText'\n\n\nexport default function() {\n  const [text, setText] = useState('')\n  const [fontSize, setFontSize] = useState(.5)\n  const [scrollSpeed, setScrollSpeed] = useState(.5)\n  const [flipX, setFlipX] = useState(false)\n  const [numVisibleLines, setNumVisibleLines] = useState(0)\n\n  const theme = useTheme()\n  const scrollPosition = useWindowScrollPosition()\n\n  const onTextInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => setText(event.currentTarget.value)\n  const onFontSizeInputChange = (event: ChangeEvent<{}>, value: number | number[]) => setFontSize(Array.isArray(value) ? value[0] : value)\n  const onScrollSpeedInputChange = (event: ChangeEvent<{}>, value: number | number[]) => setScrollSpeed(Array.isArray(value) ? value[0] : value)\n  const onFlipXSwitchChange = (event: ChangeEvent<HTMLInputElement>) => setFlipX(event.currentTarget.checked)\n  const onFullScreenButtonClick = async () => {\n    if (screenfull.isEnabled) {\n      await screenfull.request()\n    }\n  }\n\n  const scrollToBottom = () => {\n    const lineScrollDurationMs = 8000 * (1 - scrollSpeed) + 192\n\n    Scroll.animateScroll.scrollToBottom({\n      duration: lineScrollDurationMs * numVisibleLines,\n      isDynamic: true,\n      offset: scrollPosition,\n      smooth: 'linear'\n    })\n  }\n\n  return <div className={styles.app}>\n    <header>\n      <AppBar position='fixed' style={{background: theme.palette.background.default}}>\n        <Grid container spacing={4} justify='center' alignItems='center'>\n          <Grid item>\n            <FormControlLabel\n              control={<TextField placeholder='Entre com o roteiro' value={text} onChange={onTextInputChange}/>}\n              label={<Description/>}/>\n          </Grid>\n          <Grid item>\n            <FormControlLabel className={styles.sliderControl}\n                              control={<Slider min={0} max={1} step={0.01} value={scrollSpeed}\n                                               onChange={onScrollSpeedInputChange} style={{width: '8em'}}/>}\n                              label={<FastForward/>}/>\n          </Grid>\n          <Grid item>\n            <FormControlLabel\n              control={<Slider min={0} max={1} step={0.01} value={fontSize} onChange={onFontSizeInputChange}\n                               style={{width: '8em'}}/>}\n              label={<TextFields style={{transform: 'scaleX(-1)'}}/>}/>\n          </Grid>\n          <Grid item>\n            <FormControlLabel control={<Switch onChange={onFlipXSwitchChange}/>}\n                              label={<SwapHoriz/>}/>\n          </Grid>\n          <Grid item>\n            <Button onClick={scrollToBottom} variant='outlined'>Iniciar</Button>\n          </Grid>\n          <Grid item>\n            <Button onClick={onFullScreenButtonClick} variant='outlined'><Fullscreen/></Button>\n          </Grid>\n         \n        </Grid>\n      </AppBar>\n    </header>\n    <TeleprompterText\n      text={text}\n      fontSize={`${(10 * fontSize) + 2}em`}\n      flipX={flipX}\n      onNumVisibleLinesChange={setNumVisibleLines}/>\n  </div>\n}\n","import React from 'react'\nimport {createMuiTheme, CssBaseline, ThemeProvider} from '@material-ui/core'\nimport Teleprompter from './Teleprompter'\n\nconst theme = createMuiTheme({palette: {type: 'dark'}})\n\nexport default () => <ThemeProvider theme={theme}>\n  <CssBaseline>\n    <Teleprompter/>\n  </CssBaseline>\n</ThemeProvider>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\nserviceWorker.register()\n"],"sourceRoot":""}